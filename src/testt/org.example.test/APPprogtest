import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import java.util.Arrays;
import java.util.Random;
import java.util.Scanner;

public class WordScrambleGameTest {

    private WordScrambleGame game;
    private String[] wordList = {"apple", "banana", "cherry", "date", "elderberry", "fig", "grape"};

    @BeforeEach
    void setUp() {
        // Initialize the game with a fixed random seed for predictable results
        game = new WordScrambleGame(wordList, 1, 3);
    }

    @Test
    void testScrambleWord() {
        // This test checks that the scrambled word is not equal to the original word
        String word = "apple";
        String scrambled = game.scrambleWord(word);
        assertNotEquals(word, scrambled, "Scrambled word should not be equal to the original word");
    }

    @Test
    void testSetupLevel() {
        // This test checks that the setup level correctly initializes the current word and scrambled word
        game.setupLevel();
        String currentWord = game.getCurrentWord();
        String scrambledWord = game.getScrambledWord();
        assertNotNull(currentWord, "Current word should not be null");
        assertNotNull(scrambledWord, "Scrambled word should not be null");
        assertNotEquals(currentWord, scrambledWord, "Scrambled word should not be equal to the current word");
    }

    @Test
    void testStartGameCorrectGuess() {
        // Test scenario where the player makes the correct guess
        String word = game.getCurrentWord();
        game.startGame();
        assertTrue(game.getScore() > 0, "Score should be greater than 0 if the guess was correct");
    }

    @Test
    void testStartGameIncorrectGuess() {
        // Modify the setup to make sure the player always guesses incorrectly
        game = new WordScrambleGame(wordList, 1, 1) {
            @Override
            public void startGame() {
                // Override the startGame to avoid interaction with actual user input
                setupLevel();
                String guess = "wrongguess";
                while (attemptsLeft > 0) {
                    if (guess.equalsIgnoreCase(currentWord)) {
                        incrementScore();
                        break;
                    } else {
                        attemptsLeft--;
                    }
                }
            }
        };

        game.startGame();
        assertEquals(0, game.getScore(), "Score should be 0 if all guesses were incorrect");
    }
}